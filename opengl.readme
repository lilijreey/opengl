
version
1. -- 4.5

GLUT
------------------------------
封装GL 底层函数的工具类，可以更方便的使用GL开发

OpenGL 的工作原理
-----------------------------
* 一组图形过程API, 不是描述型API比如CSS
* 不包括任何的窗口管理，用户交互，I/O函数, OS 负责实现
　　一些方法来和OpenGL传递窗口绘制控制
* OpenGL 有软件实现和硬件实现两种方式
    软实现有 Mesa3D, MS OS 中的OpenGL
    硬件实现　主要采用显卡驱动


pineline 管线
===========================================
绘制流水线模型 (OpenGL 3D 渲染的过程)
顶点 -> 模型视图　-> 投影　-> 顶点

头文件库
-----------------------------
see README.md

GL 数据类型
---------------------------------------
GLByte  s_char
GLshort short
GLint   long
GLfloat
GLdouble
GLubyte
GLushort
GLintptr ptrdiff_t


函数命名约定
------------------------------------
<库名><根命令><可选参数数量><可选参数类型>
e.g. glColor3f


坐标系
===========================================
OpenGL　使用齐次坐标　
GLUT 使用CRT 坐标即 left-top 为原点 -> x y 向下加大
OpenGL x -> 大 y 向上加大

viewport 
---------------------------
把绘图坐标映射为窗口坐标

+ 模型视图矩阵 GL context 
+ 投影矩阵     GL context 

3D 到 2D
-------------------------------------
使用三角法和简单的矩阵操作


Context
==============================================
所有的ＧＬ都是基于一个state (context)
来绘制的
## glPushMatrix
## glPopMatrix



##  glMatrixMode(GL_PROJECTION);
    指定哪个矩阵是当前矩阵
      
  GL_MODELVIEW,对模型视景矩阵堆栈应用随后的矩阵操作.
  GL_PROJECTION,对投影矩阵应用随后的矩阵操作.
  GL_TEXTURE,对纹理矩阵堆栈应用随后的矩阵操作.

##glLoadIdentity()一同使用
   glLoadIdentity():将当前的用户坐标系的原点移到了屏幕中心：类似于一个复位操作

Color
============================================
OpenGL support two types of color mode
+ RGB
    value valied range is [0.0, 1.0]
+ RGBA 
  四元分量
   A mean alpha 用了表示不透明度
+ index

+ 默认情况下GL 会使用平滑着色(smooth shading)
   根据两个端点的颜色通过插值计算中间点的颜色
  　如果是绘制多边形，则会根据多个点的颜色进行插值计算

##  glShadeModle(mode) 用了改变着色模式
  GL_FALT


API
============================================
*类型
+ 图元函数
+ attribute function
+ viewing functin control virtual-camera
+ query funct
+ input-output

Point
----------------------------------------------
## glPointSize(size)
   设置点的大小


## glRectf(-0.5,0.5, 0.5,-0.5);

Line
----------------------------------------------
## glLineWidth(size), Pixs
## glEdgeFlag*
    控制线段显示


填充图元
===========================================
GL_POLYGON
GL_TRIANGLES
GL_TRIANGLE_STRIP
GL_TRIANGLE_FAN
GL_QUADS
GL_QUAD_STRIP


##  glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
// 　设置多边形的绘制方式
   默认为 GL_FILL

## glEnable/feature
   glDisable/feature
 开启和关闭GL 特性

命名 主要包含两个lib
  glXXX 和　gluXXX

## 保持状态
  glPushAttrib(mask)
  glPopAttrib(mask)

## glViewport(x,y, width, height)
    设置GL 只绘制窗口中的一部分

## glClearColor(0.0f, 1.1f, 0.0f, 1.0f) -> void
            red, green, blue, alpha
  设置清除色　(背景色) 必须使用　RGBA


## glClear* 设置前景色

buffer
-----------------------------
GL 有多种缓冲区

双缓存
=====================================================
由于显示和控制显示时异步的
使用双缓存可以保证显示时是一个完整的图像
主要使用两个颜色缓存，１个前台，１个后台
前台存储用于显示的数据，后台存储正在绘制的数据
在绘制完成后使用　glutSwapBuffers 来切换buffer

使用
 init set duble-cache mode
  glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
  绘制完后使用　glutSwapBuffers() 切换cache

## glutSwapBuffers()


## glClear(GL_COLOR_BUFFER_BIT);
 清除缓冲
  GL_COLOR_BUFFER_BIT :the buffers currently enable for color writing

## glUseProgram/1 -> void


缓冲对象
=========================================
buffer-obj 是一个GLuint 的引用
GL can not use your data directly, so you must be send this data to GL
1. allocate some memory in GL
2. fill data to memory
3. do

+ buffer-obj is a linear array of memory. managed and allocated by GL.(in GPU)
+ use control it. but only indirect control over it.


## glGenBuffers(GLsizei n, GLuint *refs)
    返回n个obj-refs (not allocated any memory)

## glBindBuffer(GLenum target, GLuint ref);
   激活obj,bind to context
  为了禁用缓冲区对象，可以用0作为缓冲区对象的标识符来调用glBindBuffer()函数。
  这将把OpenGL切换为默认的不使用缓冲区对象的模式。

   do   . 当绑定到一个以前创建的缓冲区对象时，这个缓冲区对象便成为活动的缓冲区对象。

   when the ref is 0, means cleanup; current bound to target to become unbound from it.
  

## glBufferData(Glenum target, GLsizeiptr data_size, const GLvoid *data, GLenum usage)
   -> void
   init obj, 
    do 1. allocates memory for the buffer currently bound.
       2. copy user memory data into the GL buffer memory.


rendering 
we send data to buffer, but GL not regnize what format for this data, so we need to 
   tells GL that there is vertex data in the buffer-obj and what form the vertex data taskes.

## glEnableVertexAttribArray(GLuint index)
## glDisableVertexAttribArray(GLuint index)


## glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 0, 0);
     always use buffer-obj that bound to GL_ARRAY_BUFFER


## glDrawArrays(GLenum mode, 0, 3);
show render
  set a vertex and buffer tell the buffer format, you can draw the vertex


Double Swap
====================================================
OpenGL提供了双缓存，可以用来制作动画。也就是说，在显示前台缓存内容中的一帧画面时
  后台缓存正在绘制下一帧画面，当绘制完毕，则后台缓存内容便在屏幕上显示出来，而前台正好相反，
  又在绘制下一帧画面内容。这样循环反复，屏幕上显示的总是已经画好的图形，于是看起来所有的画面都是连续的。
  在OpenGL中，设计这样的动画程序很简单，只需掌握一个重点函数，即：
　　void auxSwapBuffers(void);
　　设置交换缓存。即执行完一次绘制过程，便交换前后台缓存，
    以便让下一帧图形在屏幕后绘制完成。当然，使用不同的窗口系统设置交换缓存的函数也可能不一样
    ,比如在X窗口系统下，就最好用glxSwapBufferS()。


## glFlush 
    force drow buffer


Step
---------------------------
1. send triangle data to GL
2.


Shader
=============================================
Vertex Shader

OpenGL着色语言
---------------------------------------------------
Shader in GL are written in the OpenGL Shading Language GLSL.
 runs on the GPU. a DSL.

GLSL 著色語言規格定義了 22 個基本資料類型，有些用法與 C 相同，其它的是繪圖處理器特有的。
    void – 用於沒有返回值的函式
    bool – 條件類型，其值可以是真或假
    int – 帶負號整數
    float – 浮點數
    vec2 – 2 個浮點數組成的向量
    vec3 – 3 個浮點數組成的向量
    vec4 – 4 個浮點數組成的向量
    bvec2 – 2 個布林組成的向量
    bvec3 – 3 個布林組成的向量
    bvec4 – 4 個布林組成的向量
    ivec2 – 2 個整數組成的向量
    ivec3 – 3 個整數組成的向量
    ivec4 – 4 個整數組成的向量
    mat2 – 浮點數的 2X2 矩陣
    mat3 – 浮點數的 3X3 矩陣
    mat4 – 浮點數的 4X4 矩陣
    sampler1D – 用來存取一維紋理的句柄
    sampler2D – 用來存取二維紋理的句柄
    sampler3D – 用來存取三維紋理的句柄
    samplerCube – 用來存取立方映射紋理的句柄
    sampler1Dshadow – 用來存取一維深度紋理的句柄
    sampler2Dshadow – 用來存取二維深度紋理的句柄


lookup info
=================================================
GL 查询函数
glGet*
   e.g. glGetFloatv(GL_CURRENT_COLOR, color)

glIsEnable(feature)
  查询是否开启了某个特性

错误检查
--------------------------------------
GLenum glGetError(void)
  没有错误返回 GL_NO_ERROR

GLubyte * gluErrorString(GLenum)
   返回一个错误描述字符串 like strerror


GLUT
==============================================================
## glutInit(&argc, argv); 可以接收一些opengl 的控制参数

## glutCreateWindow("test");  将创建一个title 为给定string 的窗口

## glutDisplayFunc(display); 定义刷新时的回调函数, 在重绘窗口时调用


## glutMainLoop(); 进入事件循环，此函数后的任何代码都永远不会被执行到


## glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
   control disply mode
   use RGB color and use single buffer-cache


## glutWinodwSize(width, height)


## glutInitWindowPosition(0,0)
     left-top window in  screen-left-top

## glutBitmapCharcater()
    e.g. glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_10, 'a')
    e.g. glutBitmapCharacter(GLUT_BITMAP_8_BY_13, 'a')

    绘制字符的位置由raster position 决定，和位图的左下角重合

## glutBitmapWidht(void *font, char c)
    返回一个字体的宽度


## glutReshape(void (*f)(width, height))
    重绘回调

    GL 有默认的重绘函数

## glutIdleFunc
    当事件队列为空时，调用

## glutPostRedisplay 
    标记当前窗口需要重新绘制。通过glutMainLoop下一次循环时，
   窗口显示将被回调以重新显示窗口的正常面板。多次调用glutPostRedisplay，
    在下一个显示回调只产生单一的重新显示回调。


TEXT 文本
==============================================================
不是ＧＬ的核心部分，但是有很重要

字体的形式
+ bitmap 
  位图，就是bit 矩阵定义. 无法缩放

+ stroke 
  笔画字符有标准GL 图元创建的可以缩放


键盘 输入　keyboard
================================================================
GLUT 有一个键盘回调,当按下键盘时回调函数,没有释放事件

## glutKeyboardFunc(void (*f)(uc key, int x, int y))
(x,Y) 为光标位置像素

特殊键　使用
glutSpecialFunc 回调
GLUT 给每个特殊键都定义了一个枚举 GLUT_KEY_F1

<Ctrl> <Alt> <Shift> 三个键使用　glutGetModifiers()
来检查是否按下

鼠标 mouse
+ 点击回调
   glutMouseFunc
+ 移动回调　不管是否有点击动作
   glutMotionFunc 有按下的移动
   glutPassiveMotionFunc 没有按下的移动

window
glutCreateWindow ->WindoId
glutDestroyWindow(WindoId)
glutSetWindwo(WindoId)

菜单　menu
==================================================================
GLUT 提供了一组很小的菜单

定义一个菜单
　1. 确定菜单中有哪些选项, 显示的text
　2. 关联菜单被点击后的回调
　3. 将菜单与鼠标关联

glutCreateMenu(cb) -> MenuId

glutSetMenu(MenuId)
 设置当前菜单

glutAddMenuEntery(char *text, int value)
  为当前菜单添加一个选项
  点击会会回调glutCreateMenu 注册的cb 参数为value

glutAttachMenu(int button)
  将当前菜单附加在一个鼠标按键上
   
子菜单
　　glutAddSuMenu

注销一个回调
传入　NULL


设置观察矩阵
##glOrtho(left, right, bottom, top, near, far)

摄像机
========================================
定位
位置　eye-point

## gluLookAt(eye-point, shut-point, up)
    由相机本身坐标，相机指向点，和上边定义

消隐
============================
隐藏物体背面的图像

GL 使用z-buffer algorithm
需要一个额外的空间保存绘制过程中已经绘制的多边形深度信息，
这个额外的空间叫做z空间

useg 需要请求一个z-buffer
  glutInitDisplayMode(... | GLUT_DEPTH)
  glEnable(GL_DEPTH_TEST)
  当清空缓存时也要清空z-buffer
  glClear(... | GL_DEPTH_BUFFER_BIT)


GLU 二次曲线
======================================
提供了三种二次曲线
1.球体 sphere
2.圆柱
3.圆盘

## GLUquadricObj * gluNewQuadric()
## void gluDeleteQuadric
## void gluQuadricDrawStyle(*obj, style)
    设置二次曲线的绘制方式

GLU 对象
======================================
...

primivtives 图元
用来构建复杂对象的基本组成部件


投影方式
===========================================
glFrustum()
gluPerspective(fov, aspect, near far)
glOrtho()

变换
=========================================
会指定的变换会先执行

## 平移
  glTranslate(x, y, z) 


## 旋转
  glRotate


## 平移
  glScale(sx,sy,sz)

直接设置矩阵
## glLoadMatrix
  加载指定矩阵为当前矩阵

## glMultMatrix
  使用一个矩阵乘以当前矩阵


光照
=====================================================
